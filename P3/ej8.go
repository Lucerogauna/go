package main

import ("sync"
"fmt")

// a) Estructura Contacto
type Contact struct {
	Nombre           string
	Apellido         string
	CorreoElectronico string
	Telefono         string
}

// b) Estructura Agenda con protecci√≥n para concurrencia
type Agenda struct {
	contactos map[string]Contact /*Internamente, Go lo maneja como una tabla hash, as√≠ que la "posici√≥n" depende de c√≥mo la clave (en este caso, el string del correo) se convierte a una ubicaci√≥n interna.*/
	mutex       sync.RWMutex // RWMutex para lectura y escritura segura
/*sync.RWMutex es un candado (mutex = mutual exclusion) que permite controlar el acceso concurrente a datos compartidos, como el map de contactos.*/
}

func (a *Agenda) AgregarContacto(contacto Contact){
	a.mutex.Lock()
	defer a.mutex.Unlock()
	a.contactos[contacto.correoElectronico]= contacto
	fmt.Printf("‚úîÔ∏è Agregado: %s\n", contacto.CorreoElectronico)
	
}
func (a *Agenda)EliminarContacto(correo string){
	a.mutex.Lock()
	defer a.mutex.Unlock() // lo ejecuta al final acordarse
	delate(a.contactos, correo)
	/*No es obligatorio buscar antes de eliminar porque:
	delete es seguro: no genera error si la clave no est√°.*/
	fmt.Printf("‚ùå Eliminado: %s\n", correo)
}


/*üìå El lenguaje no garantiza seguridad de concurrencia en map incluso para lecturas.

‚ùå Si una goroutine est√° escribiendo al mismo tiempo que otra est√° leyendo, pod√©s tener errores como:
fatal error: concurrent map read and map write*/
func (a *Agenda) BuscarContacto(correo string) (Contact, bool){
	a.mutex.Lock()
	defer a.mutex.Unlock() // lo ejecuta al final acordarse

	contacto, existe := a.contactos[correo]
	if existe {
		fmt.Printf("‚úÖ Se encontr√≥ el contacto: %s\n", correo)
	} else {
		fmt.Printf("‚ùå No se encontr√≥ el contacto: %s\n", correo)
	}
	return contacto, existe
}
/* funci√≥n main() que cree una agenda, inicie varias
goroutines para agregar, eliminar y buscar contactos de manera
simult√°nea, y luego imprima el contenido de la agenda despu√©s
de un tiempo para verificar que las operaciones se hayan
realizado correctamente*/
func main(){
	agenda := Agenda{
	contactos: make(map[string]Contact),
	}

	var wg sync.WaitGroup

	// Lista de contactos para agregar
	contactos := []Contact{
		{"Ana", "Garc√≠a", "ana@gmail.com", "1111"},
		{"Luis", "Mart√≠nez", "luis@gmail.com", "2222"},
		{"Mar√≠a", "L√≥pez", "maria@gmail.com", "3333"},
		{"Juan", "P√©rez", "juan@gmail.com", "4444"},
		{"Elena", "R√≠os", "elena@gmail.com", "5555"},
	}
	for _, c := range contactos { //for each usando c como cada contacto
		wg.Add(1)//wg.Add(n) ‚Üí Le dec√≠s cu√°ntas goroutines vas a esperar.
		
		/*	Cuando quer√©s hacer m√°s cosas dentro de la goroutine
		 (ej: imprimir, controlar wg, etc.)*/
		go func(c Contact) {
			defer wg.Done() //Llam√°s esto cuando una goroutine termina.
			agenda.AgregarContacto(c)
			fmt.Println("‚úîÔ∏è Agregado:", c.CorreoElectronico)
		}(c)
		
	/*NOTA Para que se ejecute, ten√©s que llamar a la funci√≥n, 
	y la forma es poner (c) justo despu√©s de la definici√≥n:
	Go func(c Contact) {
    	// c√≥digo
	}(c)  // <-- esto llama la funci√≥n pasando el valor c
	// ¬øPara qu√© sirve pasar c como par√°metro?
	En un bucle, la variable c cambia en cada iteraci√≥n. Si no la pas√°s como par√°metro, todas las goroutines podr√≠an terminar usando el mismo valor (el √∫ltimo de la iteraci√≥n), porque la funci√≥n an√≥nima "captura" la variable del entorno y no su valor.

	Pasar el valor como par√°metro crea una copia local independiente para cada goroutine.*/
	}// Buscar contactos concurrentemente
	emailsBuscar := []string{
		"ana@gmail.com",
		"juan@gmail.com",
		"noexiste@gmail.com",
	}
	for _, email := range emailsBuscar {
		wg.Add(1)
		go func(correo string) {
			defer wg.Done()
			if c, ok := agenda.BuscarContacto(correo); ok {
				fmt.Printf("üîç Encontrado: %s %s\n", c.Nombre, c.Apellido)
			} else {
				fmt.Printf("üîç No encontrado: %s\n", correo)
			}
		}(email)
	}

	// Eliminar contactos concurrentemente
	emailsEliminar := []string{
		"ana@gmail.com",
		"elena@gmail.com",
	}
	for _, email := range emailsEliminar {
		wg.Add(1)
		go func(correo string) {
			defer wg.Done()
			agenda.EliminarContacto(correo)
			fmt.Println("‚ùå Eliminado:", correo)
		}(email)
	}

	// Esperar a que todas las operaciones terminen
	wg.Wait()

	// Esperar un poco m√°s por seguridad (no siempre necesario)

	time.Sleep(500 * time.Millisecond)

	// Imprimir contactos restantes
	agenda.ImprimirTodo()

}